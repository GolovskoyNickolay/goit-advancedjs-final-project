{"version":3,"file":"main-CTUNAtdo.js","sources":["../../src/api.js","../../src/services/apiServices.js","../../src/main.js"],"sourcesContent":["import axios from 'axios';\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst api = axios.create({\n  baseURL: 'https://your-energy.b.goit.study/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response && error.response.status === 409) {\n      const serverMessage = error.response.data?.message || 'Subscription already exists';\n\n      iziToast.error({\n        title: 'Subscription Error',\n        message: serverMessage,\n        position: 'topRight',\n      });\n\n      return { data: null };\n    } else {\n      console.error(error);\n      iziToast.error({\n        title: 'Request Error',\n        message: error?.message,\n        position: \"topRight\"\n      });\n\n      return { data: null };\n    }\n  }\n);\n\nexport default api;\n","import api from '../api.js';\n\n/**\n * @param {Object} params - The query parameters for the request.\n * @param {string} [params.bodypart] - The body part to filter by (e.g., \"back\", \"legs\").\n * @param {string} [params.equipment] - The equipment to filter by (e.g., \"dumbbell\", \"barbell\").\n * @param {number} [params.page=1] - The page number for pagination.\n * @param {number} [params.limit=10] - The number of items per page.\n * @returns {Promise<Object>} A promise that resolves with the list of exercises.\n */\nexport async function getExercises(params) {\n  const { data } = await api.get('/exercises', { params });\n  return data;\n}\n\n/**\n * @param {string|number} id - The identifier of the exercise.\n * @returns {Promise<Object>} A promise that resolves with the exercise details.\n */\nexport async function getExerciseById(id) {\n  const { data } = await api.get(`/exercises/${id}`);\n  return data;\n}\n\n/**\n * @param {string|number} id - The identifier of the exercise to update.\n * @param {Object} ratingData - The rating data object.\n * @param {number} ratingData.rating - The new rating value (e.g., a number from 1 to 5).\n * @returns {Promise<void>} A promise that resolves once the rating has been updated.\n */\nexport async function updateExerciseRating(id, ratingData) {\n  await api.patch(`/exercises/${id}/rating`, ratingData);\n}\n\n/**\n * @param {Object} [params={}] - The filter parameters for the request.\n * @param {string} [params.filter] - The type of filter (e.g., \"body parts\", \"muscles\", \"equipment\").\n * @param {number} [params.page=1] - The page number for pagination.\n * @param {number} [params.limit=12] - The number of items per page.\n * @returns {Promise<Object>} A promise that resolves with the filter data.\n */\nexport async function getFilters(params = {}) {\n  const { data } = await api.get('/filters', { params });\n  return data;\n}\n\n/**\n * @returns {Promise<Object>} A promise that resolves with the quote data.\n * The returned object may contain the following fields:\n * - `quote` {string} - The text of the quote.\n * - `author` {string} - The author of the quote.\n */\nexport async function getQuoteOfTheDay() {\n  const { data } = await api.get('/quote');\n  return data;\n}\n\n/**\n * @param {string} email - The email address of the user who wants to subscribe.\n * @returns {Promise<Object>} A promise that resolves with the server response.\n * The response object may include the following field:\n * - `message` {string} - A message indicating success or that the subscription already exists.\n */\nexport async function subscribe(email) {\n  const { data } = await api.post('/subscription', { email });\n  return data;\n}\n","import './css/styles.css';\n\n\n// NOTE: just sample how to use api methods/show errors\nimport {\n  getExercises,\n  getExerciseById,\n  updateExerciseRating,\n  getFilters,\n  getQuoteOfTheDay,\n  subscribe\n} from './services/apiServices.js';\n\nasync function init() {\n  const data = await getExercises({ bodypart: 'back' });\n  const data2 = await getExerciseById('123123123213');\n  await updateExerciseRating(123, { rating: 5 });\n  const filtersData = await getFilters({\n    filter: 'body parts',\n    page: 2,\n    limit: 10,\n  });\n\n  const quoteData = await getQuoteOfTheDay();\n  const subscribeResponse = await subscribe('test@example.com');\n\n  console.log(data, data2, subscribeResponse, quoteData, filtersData)\n}\n\ninit();\n"],"names":["api","axios","response","error","serverMessage","_a","iziToast","getExercises","params","data","getExerciseById","id","updateExerciseRating","ratingData","getFilters","getQuoteOfTheDay","subscribe","email","init","data2","filtersData","quoteData","subscribeResponse"],"mappings":"mxBAIA,MAAMA,EAAMC,EAAM,OAAO,CACvB,QAAS,uCACT,QAAS,CACP,eAAgB,kBACjB,CACH,CAAC,EAEDD,EAAI,aAAa,SAAS,IACvBE,GACQA,EAERC,GAAU,OACT,GAAIA,EAAM,UAAYA,EAAM,SAAS,SAAW,IAAK,CACnD,MAAMC,IAAgBC,EAAAF,EAAM,SAAS,OAAf,YAAAE,EAAqB,UAAW,8BAEtD,OAAAC,EAAS,MAAM,CACb,MAAO,qBACP,QAASF,EACT,SAAU,UAClB,CAAO,EAEM,CAAE,KAAM,KACrB,KACM,gBAAQ,MAAMD,CAAK,EACnBG,EAAS,MAAM,CACb,MAAO,gBACP,QAASH,GAAA,YAAAA,EAAO,QAChB,SAAU,UAClB,CAAO,EAEM,CAAE,KAAM,KAElB,CACH,EC3BO,eAAeI,EAAaC,EAAQ,CACzC,KAAM,CAAE,KAAAC,CAAM,EAAG,MAAMT,EAAI,IAAI,aAAc,CAAE,OAAAQ,CAAM,CAAE,EACvD,OAAOC,CACT,CAMO,eAAeC,EAAgBC,EAAI,CACxC,KAAM,CAAE,KAAAF,CAAM,EAAG,MAAMT,EAAI,IAAI,cAAcW,CAAE,EAAE,EACjD,OAAOF,CACT,CAQO,eAAeG,EAAqBD,EAAIE,EAAY,CACzD,MAAMb,EAAI,MAAM,cAAcW,CAAE,UAAWE,CAAU,CACvD,CASO,eAAeC,EAAWN,EAAS,GAAI,CAC5C,KAAM,CAAE,KAAAC,CAAM,EAAG,MAAMT,EAAI,IAAI,WAAY,CAAE,OAAAQ,CAAM,CAAE,EACrD,OAAOC,CACT,CAQO,eAAeM,GAAmB,CACvC,KAAM,CAAE,KAAAN,CAAI,EAAK,MAAMT,EAAI,IAAI,QAAQ,EACvC,OAAOS,CACT,CAQO,eAAeO,EAAUC,EAAO,CACrC,KAAM,CAAE,KAAAR,CAAM,EAAG,MAAMT,EAAI,KAAK,gBAAiB,CAAE,MAAAiB,CAAK,CAAE,EAC1D,OAAOR,CACT,CCrDA,eAAeS,GAAO,CACpB,MAAMT,EAAO,MAAMF,EAAa,CAAE,SAAU,MAAQ,CAAA,EAC9CY,EAAQ,MAAMT,EAAgB,cAAc,EAClD,MAAME,EAAqB,IAAK,CAAE,OAAQ,CAAG,CAAA,EAC7C,MAAMQ,EAAc,MAAMN,EAAW,CACnC,OAAQ,aACR,KAAM,EACN,MAAO,EACX,CAAG,EAEKO,EAAY,MAAMN,IAClBO,EAAoB,MAAMN,EAAU,kBAAkB,EAE5D,QAAQ,IAAIP,EAAMU,EAAOG,EAAmBD,EAAWD,CAAW,CACpE,CAEAF,EAAM"}